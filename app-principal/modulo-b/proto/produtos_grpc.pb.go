// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: produtos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogoClient is the client API for Catalogo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogoClient interface {
	GetInfoBasica(ctx context.Context, in *ProdutoRequest, opts ...grpc.CallOption) (*InfoBasicaResponse, error)
}

type catalogoClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogoClient(cc grpc.ClientConnInterface) CatalogoClient {
	return &catalogoClient{cc}
}

func (c *catalogoClient) GetInfoBasica(ctx context.Context, in *ProdutoRequest, opts ...grpc.CallOption) (*InfoBasicaResponse, error) {
	out := new(InfoBasicaResponse)
	err := c.cc.Invoke(ctx, "/Catalogo/GetInfoBasica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogoServer is the server API for Catalogo service.
// All implementations must embed UnimplementedCatalogoServer
// for forward compatibility
type CatalogoServer interface {
	GetInfoBasica(context.Context, *ProdutoRequest) (*InfoBasicaResponse, error)
	mustEmbedUnimplementedCatalogoServer()
}

// UnimplementedCatalogoServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogoServer struct {
}

func (UnimplementedCatalogoServer) GetInfoBasica(context.Context, *ProdutoRequest) (*InfoBasicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoBasica not implemented")
}
func (UnimplementedCatalogoServer) mustEmbedUnimplementedCatalogoServer() {}

// UnsafeCatalogoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogoServer will
// result in compilation errors.
type UnsafeCatalogoServer interface {
	mustEmbedUnimplementedCatalogoServer()
}

func RegisterCatalogoServer(s grpc.ServiceRegistrar, srv CatalogoServer) {
	s.RegisterService(&Catalogo_ServiceDesc, srv)
}

func _Catalogo_GetInfoBasica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdutoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogoServer).GetInfoBasica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Catalogo/GetInfoBasica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogoServer).GetInfoBasica(ctx, req.(*ProdutoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalogo_ServiceDesc is the grpc.ServiceDesc for Catalogo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalogo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Catalogo",
	HandlerType: (*CatalogoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfoBasica",
			Handler:    _Catalogo_GetInfoBasica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "produtos.proto",
}

// InventarioClient is the client API for Inventario service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventarioClient interface {
	GetEstoque(ctx context.Context, in *ProdutoRequest, opts ...grpc.CallOption) (*EstoqueResponse, error)
}

type inventarioClient struct {
	cc grpc.ClientConnInterface
}

func NewInventarioClient(cc grpc.ClientConnInterface) InventarioClient {
	return &inventarioClient{cc}
}

func (c *inventarioClient) GetEstoque(ctx context.Context, in *ProdutoRequest, opts ...grpc.CallOption) (*EstoqueResponse, error) {
	out := new(EstoqueResponse)
	err := c.cc.Invoke(ctx, "/Inventario/GetEstoque", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventarioServer is the server API for Inventario service.
// All implementations must embed UnimplementedInventarioServer
// for forward compatibility
type InventarioServer interface {
	GetEstoque(context.Context, *ProdutoRequest) (*EstoqueResponse, error)
	mustEmbedUnimplementedInventarioServer()
}

// UnimplementedInventarioServer must be embedded to have forward compatible implementations.
type UnimplementedInventarioServer struct {
}

func (UnimplementedInventarioServer) GetEstoque(context.Context, *ProdutoRequest) (*EstoqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstoque not implemented")
}
func (UnimplementedInventarioServer) mustEmbedUnimplementedInventarioServer() {}

// UnsafeInventarioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventarioServer will
// result in compilation errors.
type UnsafeInventarioServer interface {
	mustEmbedUnimplementedInventarioServer()
}

func RegisterInventarioServer(s grpc.ServiceRegistrar, srv InventarioServer) {
	s.RegisterService(&Inventario_ServiceDesc, srv)
}

func _Inventario_GetEstoque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdutoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventarioServer).GetEstoque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventario/GetEstoque",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventarioServer).GetEstoque(ctx, req.(*ProdutoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inventario_ServiceDesc is the grpc.ServiceDesc for Inventario service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventario_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Inventario",
	HandlerType: (*InventarioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEstoque",
			Handler:    _Inventario_GetEstoque_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "produtos.proto",
}
